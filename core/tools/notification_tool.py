# ChatbotCSKH/core/tools/notification_tool.py

from langchain_core.tools import tool
import requests
import json
import os
from log.logger_config import setup_logging # <-- Th√™m import logger
import random
logger = setup_logging(__name__) # <-- Kh·ªüi t·∫°o logger

LARK_WEBHOOK_URL = os.getenv("LARK_WEBHOOK_URL")
agent = ["ƒê·∫°t CSKH", "Long CSKH", "Sinh CSKH"]
customer_agent = random.choice(agent)
admin = ["ƒê·∫°t R&D", "Long R&D", "Sinh R&D"]
admin_agent = random.choice(admin)

@tool
def send_cskh_notification_tool(
    customer_name: str,
    customer_phone: str,
    issue_summary: str,
    chat_history_url: str
) -> str:
    """
    G·ª≠i m·ªôt Message Card t∆∞∆°ng t√°c ƒë·∫øn k√™nh Lark c·ªßa ƒë·ªôi ng≈© CSKH.
    """
    # --- B·∫ÆT ƒê·∫¶U THAY ƒê·ªîI: Th√™m logging ƒë·ªÉ debug ---
    if not LARK_WEBHOOK_URL:
        logger.error("LARK_WEBHOOK_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env")
        return "LARK_WEBHOOK_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."

    logger.info(f"ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn Lark Webhook: ...{LARK_WEBHOOK_URL[-10:]}")
    # --- K·∫æT TH√öC THAY ƒê·ªîI ---

    try:
        payload = {
            "msg_type": "interactive",
            "card": {
                "config": {"wide_screen_mode": True},
                "header": {
                    "template": "red",
                    "title": {"content": "üö® Y√äU C·∫¶U H·ªñ TR·ª¢ KH·∫®N C·∫§P", "tag": "plain_text"}
                },
                "elements": [
                    {
                        "tag": "div",
                        "fields": [
                            {"is_short": True, "text": {"content": f"**Kh√°ch h√†ng: **{customer_name or 'Ch∆∞a c√≥'}", "tag": "lark_md"}},
                            {"is_short": True, "text": {"content": f"**SƒêT: **{customer_phone or 'Ch∆∞a c√≥'}", "tag": "lark_md"}},
                            {"is_short": True, "text": {"content": f"**Nh√¢n vi√™n h·ªó tr·ª£: **{customer_agent}", "tag": "lark_md"}}
                        ]
                    },
                    {"tag": "div", "text": {"content": f"**T√≥m t·∫Øt v·∫•n ƒë·ªÅ:**\n{issue_summary}", "tag": "lark_md"}},
                    {"tag": "hr"},
                    {
                        "tag": "action",
                        "actions": [
                            {"tag": "button", "text": {"content": "Xem L·ªãch s·ª≠ & Ti·∫øp nh·∫≠n", "tag": "plain_text"}, "url": chat_history_url, "type": "primary"}
                        ]
                    }
                ]
            }
        }
        
        response = requests.post(LARK_WEBHOOK_URL, json=payload)
        
        response.raise_for_status()  # D√≤ng n√†y s·∫Ω b√°o l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
        
        response_json = response.json()
        if response_json.get("StatusCode") == 0:
            logger.success("G·ª≠i th√¥ng b√°o ƒë·∫øn Lark th√†nh c√¥ng!")
            return "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn ƒë·ªôi ng≈© CSKH tr√™n Lark."
        else:
            # Ghi l·∫°i l·ªói chi ti·∫øt t·ª´ Lark
            logger.error(f"Lark API tr·∫£ v·ªÅ l·ªói: {response_json.get('msg')}")
            return f"G·ª≠i th√¥ng b√°o Lark th·∫•t b·∫°i: {response_json.get('msg')}"
            
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"L·ªói HTTP khi g·ªçi Lark Webhook: {http_err} - {response.text}")
        return f"L·ªói HTTP khi g·ª≠i th√¥ng b√°o Lark: {http_err}"
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i th√¥ng b√°o Lark: {e}")
        return f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i th√¥ng b√°o Lark: {str(e)}"

@tool
def send_altercourse_notification_tool(
    customer_name: str,
    customer_phone: str,
    issue_summary: str,
    chat_history_url: str
) -> str:
    """
    G·ª≠i m·ªôt Message Card t∆∞∆°ng t√°c ƒë·∫øn k√™nh Lark c·ªßa ƒë·ªôi ng≈© CSKH.
    """
    if not LARK_WEBHOOK_URL:
        logger.error("LARK_WEBHOOK_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env")
        return "LARK_WEBHOOK_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."

    logger.info(f"ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn Lark Webhook: ...{LARK_WEBHOOK_URL[-10:]}")

    try:
        payload = {
            "msg_type": "interactive",
            "card": {
                "config": {"wide_screen_mode": True},
                "header": {
                    "template": "yellow",
                    "title": {"content": "üîî TH√îNG B√ÅO H·ªåC VI√äN H·ª¶Y KH√ìA H·ªåC", "tag": "plain_text"}
                },
                "elements": [
                    {
                        "tag": "div",
                        "fields": [
                            {"is_short": True, "text": {"content": f"**Kh√°ch h√†ng: **{customer_name or 'Ch∆∞a c√≥'}", "tag": "lark_md"}},
                            {"is_short": True, "text": {"content": f"**SƒêT: **{customer_phone or 'Ch∆∞a c√≥'}", "tag": "lark_md"}},
                            {"is_short": True, "text": {"content": f"**Nh√¢n vi√™n h·ªó tr·ª£: **{admin_agent}", "tag": "lark_md"}}
                        ]
                    },
                    {"tag": "div", "text": {"content": f"**N·ªôi dung c·ª• th·ªÉ:**\n{issue_summary}", "tag": "lark_md"}},
                    {"tag": "hr"},
    
                ]
            }
        }
        
        response = requests.post(LARK_WEBHOOK_URL, json=payload)
        
        response.raise_for_status()  # D√≤ng n√†y s·∫Ω b√°o l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
        
        response_json = response.json()
        if response_json.get("StatusCode") == 0:
            logger.success("G·ª≠i th√¥ng b√°o ƒë·∫øn Lark th√†nh c√¥ng!")
            return "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn ƒë·ªôi ng≈© CSKH tr√™n Lark."
        else:
            # Ghi l·∫°i l·ªói chi ti·∫øt t·ª´ Lark
            logger.error(f"Lark API tr·∫£ v·ªÅ l·ªói: {response_json.get('msg')}")
            return f"G·ª≠i th√¥ng b√°o Lark th·∫•t b·∫°i: {response_json.get('msg')}"
            
    except requests.exceptions.HTTPError as http_err:
        logger.error(f"L·ªói HTTP khi g·ªçi Lark Webhook: {http_err} - {response.text}")
        return f"L·ªói HTTP khi g·ª≠i th√¥ng b√°o Lark: {http_err}"
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i th√¥ng b√°o Lark: {e}")
        return f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i th√¥ng b√°o Lark: {str(e)}"